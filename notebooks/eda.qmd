
# Data Analysis

Our study focuses on the "Differentiated Thyroid Cancer Recurrence" dataset @borzooei2023 hosted by the UCI Machine Learning Repository. The UCI Machine Learning Repository offers a wide array of datasets used for empirical analysis in machine learning and data mining @ucidata. Established by the University of California, Irvine, this repository facilitates academic and educational pursuits by providing free access to datasets that cover various domains. As of March, 2024, it hosts and maintains over 600 datasets.

```{r read-raw-data, echo=FALSE, cache=TRUE}

raw_data <- readr::read_csv(here::here('data/raw-data.csv'))

```

The "Differentiated Thyroid Cancer Recurrence" dataset encompasses `r nrow(raw_data)` samples or observations, and a range of `r ncol(raw_data)` variables pertinent to thyroid cancer, including patient demographics, clinical features, and pathological details, all aimed at elucidating patterns associated with cancer recurrence.

We will employ six distinct modeling methods to analyze our dataset: Artificial Neural Network (ANN), K-Nearest Neighbors (KNN), Support Vector Machine (SVM), Logistic Regression (LR), Random Forest (RF), and Extreme Gradient Boosting (XGBoost). Each of these methods brings unique strengths to the analysis, with ANN providing deep learning capabilities, KNN offering simplicity and ease of interpretation, SVM delivering powerful discriminative classification, LR providing an intuitive and easily trainable implementation, and the ensemble methods RF and XGBoost offering highly robust and accurate tree algorithms -- thereby encompassing a comprehensive approach to predicting cancer recurrence in the studied dataset.

To prepare our data for modeling, we fix a typo, remove duplicate observations, and transform the categorical variables into factors.

```{r wrangle-data, echo=TRUE, cache=TRUE}

#' Load raw data.
cleaned_data <- 
  readr::read_csv(here::here('data/raw-data.csv')) |>
  # Remove duplicates.
  dplyr::distinct() |>
  # Fix column name typo.
  dplyr::rename(`Hx Radiotherapy` = 'Hx Radiothreapy') |>
  dplyr::mutate(Gender = ifelse(Gender == 'F', 'Female', 'Male')) |>
  dplyr::mutate(
    Gender = factor(Gender, levels = c('Female', 'Male')),
    Smoking = factor(Smoking, levels = c('Yes', 'No')),
    `Hx Smoking` = factor(`Hx Smoking`, levels = c('Yes', 'No')),
    `Hx Radiotherapy` = factor(`Hx Radiotherapy`, levels = c('Yes', 'No')),
    `Thyroid Function` = factor(
      `Thyroid Function`,
      levels = c('Euthyroid', 'Clinical Hyperthyroidism',
                 'Subclinical Hyperthyroidism', 'Clinical Hypothyroidism',
                 'Subclinical Hypothyroidism')),
    `Physical Examination` = factor(`Physical Examination`,
                                    levels = c('Normal', 'Diffuse goiter', 
                                               'Single nodular goiter-right',
                                               'Single nodular goiter-left', 
                                               'Multinodular goiter')),
    Adenopathy = factor(Adenopathy,
                        levels = c('No', 'Right', 'Left', 'Bilateral', 
                                   'Posterior', 'Extensive')),
    Pathology = factor(
      Pathology,
      levels = c('Papillary', 'Micropapillary', 'Follicular',
                 'Hurthel cell')),
    Focality = factor(Focality, levels = c('Uni-Focal', 'Multi-Focal')),
    `T` = factor(`T`, levels = c('T1a', 'T1b', 'T2', 'T3a', 'T3b', 'T4a',
                                 'T4b')),
    N = factor(N, levels = c('N0', 'N1b', 'N1a')),
    M = factor(M, levels = c('M0', 'M1')),
    Stage = factor(Stage, levels = c('I', 'II', 'III', 'IVA', 'IVB')),
    Response = factor(
      Response,
      levels = c('Excellent', 'Biochemical Incomplete',
                 'Structural Incomplete', 'Indeterminate')),
    Risk = factor(Risk, levels = c('Low', 'Intermediate', 'High')),
    Recurred = factor(Recurred, levels = c('Yes', 'No'))
  )

```

```{r write-cleaned-data, echo=FALSE, cache=TRUE, include=FALSE}

# Save cleaned data.
readr::write_csv(x = cleaned_data, file = here::here('data', 'cleaned-data.csv'))

```

```{r males-females-count, cache=TRUE}

# Total observations.
total_obs <- nrow(cleaned_data)

# Number of males/females & gender percentages.
fem_no <- sum(cleaned_data$Gender == 'Female')
males_no <- sum(cleaned_data$Gender == 'Male')
fem_perc <- round(fem_no/total_obs*100, 1)
males_perc <- round(males_no/total_obs*100, 1)

# Gender by recurrence.
fem_rec_yes <- sum(cleaned_data$Gender == 'Female' & cleaned_data$Recurred == 'Yes')
fem_rec_no <- sum(cleaned_data$Gender == 'Female' & cleaned_data$Recurred == 'No')
male_rec_yes <- sum(cleaned_data$Gender == 'Male' & cleaned_data$Recurred == 'Yes')
male_rec_no <- sum(cleaned_data$Gender == 'Male' & cleaned_data$Recurred == 'No')
fem_rec_yes_perc <- round(fem_rec_yes/fem_no*100, 1)
fem_rec_no_perc <- round(fem_rec_no/fem_no*100, 1)
male_rec_yes_perc <- round(male_rec_yes/males_no*100, 1)
male_rec_no_perc <- round(male_rec_no/males_no*100, 1)

```

After removing duplicates, our data has `r nrow(cleaned_data)` observations. Out of the `r ncol(cleaned_data)` variables, `r ncol(cleaned_data) - 1` will be used as features, leaving `Recurred` as the target variable to be predicted. Among the patients, there is a significant disparity between males and females: `r glue::glue('{fem_no}({fem_perc}%)')` are females and `r glue::glue('{males_no}({males_perc}%)')` are males. Males are about evenly distributed in terms of cancer recurrence with `r glue::glue('{male_rec_yes_perc}%')` total recurred cases. On the other hand, females are not evenly distributed in terms of cancer recurrence with `r glue::glue('{fem_rec_yes_perc}%')` total recurred cases (see @fig-gender-dist).

<!-- ```{r echo=FALSE} -->
<!-- #| label: fig-gender-dist -->
<!-- #| fig-cap: 'Gender Distribution by Cancer Recurrence.' -->
<!-- #| fig-alt: "Gender Distribution by Cancer Recurrence." -->

<!-- # knitr::include_graphics(here::here('images/Gender-plot.png')) -->
<!-- knitr::include_graphics(here::here('images/gender_dist_plot.png')) -->
<!-- ``` -->

```{r fig-gender-dist}
#| label: fig-gender-dist
#| fig-cap: "Gender Distribution by Cancer Recurrence"
#| fig-alt: "Gender Distribution by Cancer Recurrence"

# Gender distribution grouped by cancer recurrence.
gender_dist_plot <- cleaned_data |>
  dplyr::mutate(fem_total = sum(Gender == 'Female'),
                male_total= sum(Gender == 'Male')) |>
  dplyr::group_by(Gender, Recurred) |>
  dplyr::reframe(count = dplyr::n(), fem_total, male_total) |>
  dplyr::mutate(
    count = ifelse(Gender == 'Female',
                   round(count/fem_total*100, 1),
                   round(count/male_total*100, 1))) |>
  dplyr::distinct() |>
  plotly::plot_ly(
    x = ~Gender,
    y = ~count,
    color = ~Recurred,
    text = ~Recurred,
    opacity = 0.7,
    type = 'bar',
    hovertemplate = '<b>Gender</b>: %{x} <br><b>Recurred</b>: %{text} <br><b>Percentage</b>: %{y} <extra></extra>'
    ) |>
  plotly::config(displayModeBar = FALSE) |>
  plotly::layout(bargap = 0.5, barmode = 'stack',
                 yaxis = list(title = '', ticksuffix = '%'),
                 legend = list(title = list(text = '<b>Recurred</b>'))
  )

plotly::save_image(gender_dist_plot, here::here('images/gender_dist_plot.png'))
gender_dist_plot

```

The distribution of `Age` by cancer recurrence is shown in @fig-age-dist. Note that, in general, older patients are more likely to recur.

<!-- ```{r echo=FALSE} -->
<!-- #| label: fig-age-dist -->
<!-- #| fig-cap: "Age Distribution by Cancer Recurrence" -->
<!-- #| fig-alt: "Age Distribution by Cancer Recurrence" -->

<!-- # knitr::include_graphics(here::here('images/Age-plot.png')) -->
<!-- knitr::include_graphics(here::here('images/age_dist_plot.png')) -->
<!-- ``` -->

```{r fig-age-dist}
#| label: fig-age-dist
#| fig-cap: "Age Distribution by Cancer Recurrence"
#| fig-alt: "Age Distribution by Cancer Recurrence"

#' Age Distribution grouped by cancer recurrence.
age_dist_plot <- cleaned_data |>
  plotly::plot_ly() |>
  plotly::add_trace(
    x = ~Age,
    color = ~Recurred,
    text = ~Recurred,
    opacity = 0.7, #marker = list(color = '02d46a'),
    type = 'histogram',
    histnorm = 'percent',
    hovertemplate = '<b>Age Range</b>: %{x} years <br><b>Percentage</b>: %{y:.1f}%<br><b>Recurred</b>: %{text}<extra></extra>'
    ) |>
  plotly::config(displayModeBar = FALSE) |>
  plotly::layout(bargap = 0.1, barmode = 'stack',
                 yaxis = list(ticksuffix = '%'),
                 legend = list(title = list(text = '<b>Recurred</b>'))
  )

plotly::save_image(age_dist_plot, here::here('images/age_dist_plot.png'))
age_dist_plot

```


```{r prep-summary-dt, cache=TRUE}

# Create a summary of the data features to be shown in a table.
dt_summary <- purrr::map(
  colnames(cleaned_data |> dplyr::select(-Age, -Recurred)),
  \(x) paste0(unique(sort(cleaned_data[[x]])), collapse = ', ')
)
names(dt_summary) <- colnames(cleaned_data |> dplyr::select(-Age, -Recurred))
dt_summary <- tibble::as_tibble(dt_summary) |>
  tidyr::pivot_longer(
    cols = dplyr::everything(),
    names_to = 'Feature',
    values_to = 'Values'
  )

```

Besides `Age`, the rest of the features are categorical. One interesting categorical feature is `Adenopathy`. It represents the presence of swollen lymph nodes during physical examination. The different adenopathy types observed are no adenopathy, anterior right, anterior left, bilateral (i.e., both sides of the body), posterior, and extensive (i.e., involves all the locations). Note the high correlation between swollen lymph nodes and DTC recurrence rate (see @fig-aden-dist).

<!-- ```{r echo=FALSE} -->
<!-- #| label: fig-aden-dist -->
<!-- #| fig-cap: "Adenopathy Distribution by cancer recurrence." -->
<!-- #| fig-alt: "Adenopathy Distribution by cancer recurrence." -->

<!-- # knitr::include_graphics(here::here('images/Ade-plot.png')) -->
<!-- knitr::include_graphics(here::here('images/aden_dist_plot.png')) -->

<!-- ``` -->

```{r fig-aden-dist}
#| label: fig-aden-dist
#| fig-cap: "Adenopathy Distribution by Cancer Recurrence"
#| fig-alt: "Adenopathy Distribution by Cancer Recurrence"

# Adenopathy distribution by cancer recurrence.
aden_dist_plot <- cleaned_data |>
  #' Find first the total number of patients by Adenopathy.
  #' This will be used to find the percentage of repeating cases next.
  dplyr::reframe(
    total_aden = dplyr::n(),
    .by = Adenopathy,
    Recurred # Keep this column.
  ) |>
  # Calculate the number of cancer recurrences per adepathy. Calculate %.
  dplyr::reframe(
    total_rec = round(dplyr::n()/total_aden*100, 1),
    .by = c(Adenopathy, Recurred),
    total_aden = total_aden
  ) |>
  dplyr::distinct() |>
  plotly::plot_ly(
    x = ~Adenopathy,
    y = ~total_rec,
    color = ~Recurred,
    text = ~Recurred,
    opacity = 0.7,
    type = 'bar',
    hovertext = ~total_aden,
    hovertemplate = '<b>Adenopathy</b>: %{x} <br><b>Recurred</b>: %{text} <br><b>Percentage</b>: %{y} of %{hovertext} patients <extra></extra>'
    ) |>
  plotly::config(displayModeBar = FALSE) |>
  plotly::layout(bargap = 0.1, barmode = 'stack',
                 yaxis = list(title = '', ticksuffix = '%'),
                 legend = list(title = list(text = '<b>Recurred</b>'))
  )

plotly::save_image(aden_dist_plot, here::here('images/aden_dist_plot.png'))
aden_dist_plot

```


A summary of all the features and their categories are shown in @tbl-summary.

```{r tbl-summ}
#| label: tbl-summary
#| tbl-cap: "Feature Names and their Distinct Values"
#| tbl-alt: "Feature Names and their Distinct Values"

# Prepare table's theme.
theme <- reactable::reactableTheme(
  borderColor = "#dfe2e5",
  stripedColor = "#f6f8fa",
  highlightColor = "#f0f5f9",
  cellPadding = "8px 12px"
)

reactable::reactable(
  dt_summary,
  searchable = FALSE,
  resizable = TRUE,
  onClick = "expand",
  bordered = TRUE,
  highlight = TRUE,
  compact = TRUE,
  height = "auto",
  theme = theme,
  pagination = FALSE
)

```

